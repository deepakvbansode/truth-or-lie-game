{"version":3,"sources":["services/firebase.js","pages/Home.jsx","components/Players.jsx","pages/Admin.jsx","helpers/utils.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","auth","db","database","Home","props","playerId","localStorage","getItem","state","statements","guess","readError","writeError","playerName","playerInfo","currentPlayer","resultDeclare","handleChange","bind","handleSubmit","submitGuess","handleGuess","listenForPlayer","this","setState","ref","on","snapshot","forEach","snap","push","val","some","statement","isLie","error","message","currentGuess","event","target","value","update","lockedGuess","preventDefault","child","key","set","name","totalCorrectGuess","timestamp","Date","now","setItem","alertColor","alertMessage","correctStatement","find","id","Jumbotron","className","length","Alert","color","ListGroup","map","ListGroupItem","active","tag","for","action","disabled","type","checked","onChange","Button","size","onClick","onSubmit","Component","Player","players","Table","striped","player","index","scope","Admin","statement1","statement2","statement3","playedPlayerIds","guessStart","lieStatementNo","statement1Guess","statement2Guess","statement3Guess","handleGuessStart","handleSubmitLie","choosePlayer","sort","player1","player2","parseInt","updates","1","2","3","updatedPlayer","newPlayedList","randomPlayer","allPlayers","playedPlayers","Object","keys","playingPlayer","filter","noOfPlayers","Math","floor","random","getRandomPlayer","totalPlayers","statement1Percentage","statement2Percentage","statement3Percentage","gameOver","Input","Progress","animated","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a9e4e84e.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst config = {\n  apiKey: \"AIzaSyDb2HjIn9n3E3voLC04pXzBf5yuaQQAKA4\",\n  authDomain: \"truth-or-lie-22542.firebaseapp.com\",\n  databaseURL: \"https://truth-or-lie-22542.firebaseio.com\",\n};\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth;\nexport const db = firebase.database();\n","import React, { Component } from \"react\";\nimport { db } from \"../services/firebase\";\nimport { Jumbotron, Alert, Button, ListGroup, ListGroupItem } from \"reactstrap\";\n\nconst PLAYER_NAME = \"player-name\";\n\nexport class Home extends Component {\n  constructor(props) {\n    super(props);\n    const playerId = localStorage.getItem(PLAYER_NAME);\n    this.state = {\n      statements: [],\n      guess: null,\n      readError: null,\n      writeError: null,\n      playerName: \"\",\n      playerId,\n      playerInfo: null,\n      currentPlayer: null,\n      resultDeclare: false,\n\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.submitGuess = this.submitGuess.bind(this);\n    this.handleGuess = this.handleGuess.bind(this);\n    this.listenForPlayer = this.listenForPlayer.bind(this);\n  }\n\n  async componentDidMount() {\n    this.setState({ readError: null });\n    if (this.state.playerId) {\n      this.listenForPlayer(this.state.playerId);\n    }\n    try {\n      db.ref(\"statements\").on(\"value\", (snapshot) => {\n        let statements = [];\n        snapshot.forEach((snap) => {\n          statements.push(snap.val());\n        });\n        let resultDeclare = statements.some((statement)=>statement.isLie)\n        this.setState({ statements, resultDeclare });\n      });\n      db.ref(\"currentPlayer\").on(\"value\", (snapshot) => {\n        const currentPlayer = snapshot.val();\n        this.setState({ currentPlayer });\n      });\n    } catch (error) {\n      this.setState({ readError: error.message });\n    }\n  }\n\n  async listenForPlayer(playerId) {\n    try {\n      db.ref(\"players/\" + playerId).on(\"value\", (snapshot) => {\n        let playerInfo = snapshot.val();\n        this.setState({ playerInfo, guess: playerInfo.currentGuess });\n      });\n      db.ref(\"players/\");\n    } catch (error) {\n      this.setState({ readError: error.message });\n    }\n  }\n\n  handleChange(event) {\n    this.setState({\n      playerName: event.target.value,\n    });\n  }\n\n  handleGuess(event) {\n    this.setState({\n      guess: event.target.value,\n    });\n  }\n\n  async submitGuess() {\n    const { guess, playerId } = this.state;\n    this.setState({ writeError: null });\n    try {\n      await db.ref(\"players/\" + playerId).update({\n        currentGuess: guess,\n        lockedGuess: true,\n      });\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    this.setState({ writeError: null });\n    try {\n      const playerId = db.ref().child(\"players\").push().key;\n      await db.ref(\"players/\" + playerId).set({\n        playerId: playerId,\n        name: this.state.playerName,\n        currentGuess: null,\n        totalCorrectGuess: 0,\n        timestamp: Date.now(),\n      });\n\n      this.setState({ playerName: \"\", playerId });\n      localStorage.setItem(PLAYER_NAME, playerId);\n      this.listenForPlayer(playerId);\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  }\n  render() {\n    const {\n      statements,\n      playerId,\n      playerName,\n      error,\n      writeError,\n      guess,\n      playerInfo,\n      currentPlayer,\n      resultDeclare\n    } = this.state;\n    let alertColor = \"\";\n    let alertMessage = \"\";\n    if(resultDeclare){\n        const correctStatement = statements.find((statement) => statement.isLie)\n        if(guess == correctStatement.id){\n            alertColor=\"success\";\n            alertMessage=\"Great.....you guessed it!\"\n        } else {\n            alertColor=\"danger\";\n            alertMessage=\"Better luck next time!\"\n        }\n    }\n    return (\n      <div>\n        <Jumbotron>\n          {playerId ? (\n            <div className=\"player-wrapper\">\n              {statements.length === 0 && <div>Game will begin soon...</div>}\n              {\n                  resultDeclare && \n                        <Alert color={alertColor}>{alertMessage}</Alert>\n              }\n              {currentPlayer && (\n                <>\n                  <p>{currentPlayer.name}'s lie is:</p>\n                  <ListGroup>\n                    {statements.map((statement) => {\n                      return (\n                        <ListGroupItem\n                          active={guess == statement.id}\n                          key={statement.id}\n                          tag=\"label\"\n                          for={statement.id}\n                          action\n                          disabled={\n                            (currentPlayer &&\n                              currentPlayer.playerId == playerId) ||\n                            (playerInfo ? playerInfo.lockedGuess : false)\n                          }\n                        >\n                          <input\n                            type=\"radio\"\n                            id={statement.id}\n                            name=\"guess\"\n                            value={statement.id}\n                            checked={guess == statement.id}\n                            onChange={this.handleGuess}\n                            className=\"invisible\"\n                          ></input>\n                          <label for={statement.id}>{statement.value}</label>\n                        </ListGroupItem>\n                      );\n                    })}\n                  </ListGroup>\n                </>\n              )}\n              {currentPlayer && currentPlayer.playerId == playerId ? (\n                <div>You cannot guess...these are your statements</div>\n              ) : (\n                <Button\n                  color=\"primary\"\n                  size=\"lg\"\n                  active\n                  onClick={this.submitGuess}\n                  disabled={playerInfo ? playerInfo.lockedGuess : false}\n                >\n                  Submit Guess\n                </Button>\n              )}\n            </div>\n          ) : (\n            <form onSubmit={this.handleSubmit}>\n              <input onChange={this.handleChange} value={playerName}></input>\n              {error ? <p>{writeError}</p> : null}\n\n              <Button color=\"primary\" size=\"lg\" active type=\"submit\">\n                Start Playing\n              </Button>\n            </form>\n          )}\n        </Jumbotron>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Table } from 'reactstrap';\nexport const Player = ({ players }) => {\n    \n  return (\n      <Table striped>\n        <thead>\n          <tr>\n            <th>Sr.No.</th>\n            <th>Name</th>\n            <th>Correct guesses</th>\n          </tr>\n        </thead>\n        <tbody>\n          {players.map((player, index) => {\n            return (\n              <tr key={player.id}>\n                <th scope=\"row\">{index + 1}</th>\n                <td>{player.name}</td>\n                <td>{player.totalCorrectGuess}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n  );\n};\n","import React, { Component } from \"react\";\nimport { db } from \"../services/firebase\";\nimport { Player } from \"../components/Players\";\nimport { getRandomPlayer } from \"../helpers/utils\";\nimport {\n  Jumbotron,\n  Input,\n  Button,\n  ListGroup,\n  ListGroupItem,\n  Progress,\n} from \"reactstrap\";\nexport class Admin extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      statement1: \"\",\n      statement2: \"\",\n      statement3: \"\",\n      players: [],\n      readError: null,\n      writeError: null,\n      playedPlayerIds: {},\n      currentPlayer: null,\n      guessStart: false,\n      lieStatementNo: null,\n      statement1Guess: 0,\n      statement2Guess: 0,\n      statement3Guess: 0,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleGuessStart = this.handleGuessStart.bind(this);\n    this.handleSubmitLie = this.handleSubmitLie.bind(this);\n    this.choosePlayer = this.choosePlayer.bind(this);\n    this.handleGuess = this.handleGuess.bind(this);\n  }\n\n  async componentDidMount() {\n    this.setState({ readError: null });\n    try {\n      db.ref(\"players\").on(\"value\", (snapshot) => {\n        let players = [];\n        let statement1Guess = 0;\n        let statement2Guess = 0;\n        let statement3Guess = 0;\n        snapshot.forEach((snap) => {\n          let player = snap.val();\n          players.push(player);\n          if (this.state.guessStart) {\n            switch (player.currentGuess) {\n              case \"1\":\n                statement1Guess++;\n                break;\n              case \"2\":\n                statement2Guess++;\n                break;\n              case \"3\":\n                statement3Guess++;\n                break;\n              default:\n                return;\n            }\n          }\n        });\n        players = players.sort((player1, player2) => parseInt(player2.totalCorrectGuess) - parseInt(player1.totalCorrectGuess) )\n        this.setState({\n          players,\n          statement1Guess,\n          statement2Guess,\n          statement3Guess,\n        });\n      });\n    } catch (error) {\n      this.setState({ readError: error.message });\n    }\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async handleGuessStart(event) {\n    event.preventDefault();\n    this.setState({ writeError: null });\n    try {\n      const {\n        statement1,\n        statement2,\n        statement3,\n        players,\n        currentPlayer,\n      } = this.state;\n      const statements = {\n        1: { value: statement1, id: 1 },\n        2: { value: statement2, id: 2 },\n        3: { value: statement3, id: 3 },\n      };\n      let updates = {};\n      updates[\"/statements\"] = statements;\n      players.forEach((player) => {\n        const updatedPlayer = {\n          ...player,\n          currentGuess: null,\n          lockedGuess: false,\n        };\n        updates[\"/players/\" + player.playerId] = updatedPlayer;\n      });\n\n      updates[\"/currentPlayer\"] = currentPlayer;\n      db.ref().update(updates);\n      this.setState({\n        guessStart: true,\n      });\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  }\n\n  async handleSubmitLie() {\n    this.setState({ writeError: null });\n    try {\n      const {\n        statement1,\n        statement2,\n        statement3,\n        players,\n        lieStatementNo,\n        playedPlayerIds,\n        currentPlayer,\n      } = this.state;\n      const statements = {\n        1: { value: statement1, id: 1, isLie: lieStatementNo == 1 },\n        2: { value: statement2, id: 2, isLie: lieStatementNo == 2 },\n        3: { value: statement3, id: 3, isLie: lieStatementNo == 3 },\n      };\n      let updates = {};\n      updates[\"/statements\"] = statements;\n      players.forEach((player) => {\n        const totalCorrectGuess =\n          player.currentGuess == lieStatementNo\n            ? parseInt(player.totalCorrectGuess) + 1\n            : player.totalCorrectGuess;\n        const updatedPlayer = { ...player, totalCorrectGuess };\n        updates[\"/players/\" + player.playerId] = updatedPlayer;\n      });\n\n      db.ref().update(updates);\n      let newPlayedList = {\n        ...playedPlayerIds,\n        [currentPlayer.playerId]: true,\n      };\n      this.setState({\n        currentPlayer: null,\n        guessStart: false,\n        playedPlayerIds: newPlayedList,\n        lieStatementNo:null,\n        statement1:\"\",\n        statement2:\"\",\n        statement3:\"\",\n      });\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  }\n\n  choosePlayer() {\n    const randomPlayer = getRandomPlayer(\n      this.state.players,\n      this.state.playedPlayerIds\n    );\n    this.setState({ currentPlayer: randomPlayer });\n  }\n\n  handleGuess(event) {\n    this.setState({\n      lieStatementNo: event.target.value,\n    });\n  }\n\n  render() {\n    const {\n      statement1,\n      statement2,\n      statement3,\n      error,\n      writeError,\n      currentPlayer,\n      guessStart,\n      lieStatementNo,\n      players,\n      statement1Guess,\n      statement2Guess,\n      statement3Guess,\n      playedPlayerIds\n    } = this.state;\n    const totalPlayers = players.length - 1;\n    const statement1Percentage =\n      totalPlayers > 0 ? (100 * parseInt(statement1Guess)) / totalPlayers : 0;\n    const statement2Percentage =\n      totalPlayers > 0 ? (100 * parseInt(statement2Guess)) / totalPlayers : 0;\n    const statement3Percentage =\n      totalPlayers > 0 ? (100 * parseInt(statement3Guess)) / totalPlayers : 0;\n    const gameOver = players.length > 0 && players.length == Object.keys(playedPlayerIds).length;\n    return (\n      <div>\n        <Jumbotron className=\"admin-wrapper\">\n          <div className=\"statement-wrapper\">\n            {currentPlayer ? (\n              <>\n                <p className=\"h1\">\n                  <mark>{currentPlayer.name} </mark>statements are as follows:\n                </p>\n                <ListGroup>\n                  <ListGroupItem\n                    active={lieStatementNo == 1}\n                    tag=\"label\"\n                    for=\"1\"\n                    action\n                  >\n                    <input\n                      type=\"radio\"\n                      id=\"1\"\n                      name=\"guess\"\n                      value=\"1\"\n                      checked={lieStatementNo == 1}\n                      onChange={this.handleGuess}\n                      className=\"invisible\"\n                    ></input>\n\n                    <Input\n                      type=\"text\"\n                      onChange={this.handleChange}\n                      name=\"statement1\"\n                      value={statement1}\n                    />\n                    {guessStart && (\n                      <div className=\"progress-wrapper\">\n                        <Progress animated color=\"info\" value={statement1Percentage}>\n                          {statement1Percentage}%\n                        </Progress>\n                      </div>\n                    )}\n                  </ListGroupItem>\n                  <ListGroupItem\n                    active={lieStatementNo == 2}\n                    tag=\"label\"\n                    for=\"2\"\n                    action\n                  >\n                    <input\n                      type=\"radio\"\n                      id=\"2\"\n                      name=\"guess\"\n                      value=\"2\"\n                      checked={lieStatementNo == 2}\n                      onChange={this.handleGuess}\n                      className=\"invisible\"\n                    ></input>\n\n                    <Input\n                      type=\"text\"\n                      onChange={this.handleChange}\n                      name=\"statement2\"\n                      value={statement2}\n                    />\n                    {guessStart && (\n                      <div className=\"progress-wrapper\">\n                        <Progress animated color=\"info\" value={statement2Percentage}>\n                          {statement2Percentage}%\n                        </Progress>\n                      </div>\n                    )}\n                  </ListGroupItem>\n                  <ListGroupItem\n                    active={lieStatementNo == 3}\n                    tag=\"label\"\n                    for=\"3\"\n                    action\n                  >\n                    <input\n                      type=\"radio\"\n                      id=\"3\"\n                      name=\"guess\"\n                      value=\"3\"\n                      checked={lieStatementNo == 3}\n                      onChange={this.handleGuess}\n                      className=\"invisible\"\n                    ></input>\n\n                    <Input\n                      type=\"text\"\n                      onChange={this.handleChange}\n                      name=\"statement3\"\n                      value={statement3}\n                    />\n                    {guessStart && (\n                      <div className=\"progress-wrapper\">\n                        <Progress animated color=\"info\" value={statement3Percentage}>\n                          {statement2Percentage}%\n                        </Progress>\n                      </div>\n                    )}\n                  </ListGroupItem>\n                </ListGroup>\n                {error ? <p>{writeError}</p> : null}\n                {guessStart ? (\n                  <Button\n                    color=\"primary\"\n                    size=\"lg\"\n                    active\n                    onClick={this.handleSubmitLie}\n                  >\n                    Submit Lie\n                  </Button>\n                ) : (\n                  <Button\n                    color=\"primary\"\n                    size=\"lg\"\n                    active\n                    onClick={this.handleGuessStart}\n                  >\n                    Start Guess\n                  </Button>\n                )}\n              </>\n            ) : gameOver ? <div className=\"game-over\">Game Over</div> :(\n              <Button\n                color=\"primary\"\n                size=\"lg\"\n                active\n                onClick={this.choosePlayer}\n              >\n                Choose the Player\n              </Button>\n            )}\n          </div>\n          <div className=\"players-list\">\n            <Player players={this.state.players} />\n          </div>\n        </Jumbotron>\n      </div>\n    );\n  }\n}\n","export const getRandomPlayer = (allPlayers, playedPlayers) => {\n    \n    if(allPlayers.length === Object.keys(playedPlayers).length){\n        return null;\n    }\n    const playingPlayer = allPlayers.filter((player) => !playedPlayers[player.playerId]);\n    const noOfPlayers = playingPlayer.length;\n    const playerIndex = Math.floor(Math.random() * noOfPlayers)\n    return playingPlayer[playerIndex];\n}","import React from \"react\";\nimport \"./App.css\";\n\nimport { Home } from \"./pages/Home\";\nimport { Admin } from \"./pages/Admin\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n \n\nfunction App() {\n  return <Router>\n  <Switch>\n    <Route exact path=\"/truth-or-lie-game\" component={Home}></Route>\n    <Route path=\"/truth-or-lie-game/admin\" component={Admin}></Route>\n  </Switch>\n</Router>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}