{"version":3,"sources":["services/firebase.js","components/Players.jsx","helpers/utils.js","components/Animation.jsx","pages/Game.jsx","pages/Admin.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","auth","db","database","Player","players","Table","striped","map","player","index","key","id","scope","name","totalCorrectGuess","getRandomPlayer","allPlayers","playedPlayers","length","Object","keys","playingPlayer","filter","playerId","noOfPlayers","playerIndex","Math","floor","random","getStatementWisePercentage","statement1Guess","statement2Guess","statement3Guess","totalGuess","forEach","currentGuess","totalPlayers","round","parseInt","Animation","props","state","displayName","names","iterator","this","timerId","setInterval","setState","duration","setTimeout","clearInterval","className","Component","Game","hasValidPlayerChecked","updatePlayers","snapshot","snap","val","push","game","pollStarted","sort","player1","player2","hasPlayerSession","find","showLoader","sessionStorage","removeItem","updateStatements","statements","resultDeclare","some","statement","isLie","handlePlayerNameChange","event","playerName","target","value","handleLogin","a","preventDefault","writeError","ref","child","set","lockedGuess","timestamp","Date","now","setItem","message","handleStatementChange","split","update","isTyping","handleStatementBlur","startPoll","updates","updatedPlayer","console","log","error","handleSubmitLie","guess","playedPlayerIds","currentPlayer","updatedStatements","1","2","3","newPlayedList","showResult","handleChooseNextPlayer","gameStarted","choosingPlayer","randomPlayer","handleGuess","handleSubmitGuess","renderAnimation","renderChosenPlayerPollStartedUI","playerInfo","percentages","ListGroup","ListGroupItem","active","tag","for","action","disabled","type","checked","onChange","Progress","animated","color","Button","size","onClick","renderChosenPlayerBeforePollStartUI","statement_1","statement_2","statement_3","Input","onBlur","renderNonChosenPlayerUI","every","alertColor","alertMessage","correctStatement","Alert","renderLoginUI","onSubmit","FormGroup","Label","placeholder","playerSession","getItem","readError","on","ui","Spinner","style","width","height","gameStarter","Jumbotron","Admin","statement1","statement2","statement3","guessStart","lieStatementNo","handleChange","bind","handleGuessStart","choosePlayer","statement1Percentage","statement2Percentage","statement3Percentage","gameOver","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.79d77567.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst config = {\n  apiKey: \"AIzaSyDb2HjIn9n3E3voLC04pXzBf5yuaQQAKA4\",\n  authDomain: \"truth-or-lie-22542.firebaseapp.com\",\n  databaseURL: \"https://truth-or-lie-22542.firebaseio.com\",\n};\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth;\nexport const db = firebase.database();\n","import React from \"react\";\nimport { Table } from 'reactstrap';\nexport const Player = ({ players }) => {\n    \n  return (\n      <Table striped>\n        <thead>\n          <tr>\n            <th>Sr.No.</th>\n            <th>Name</th>\n            <th>Correct guesses</th>\n          </tr>\n        </thead>\n        <tbody>\n          {players.map((player, index) => {\n            return (\n              <tr key={player.id}>\n                <th scope=\"row\">{index + 1}</th>\n                <td>{player.name}</td>\n                <td>{player.totalCorrectGuess}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n  );\n};\n","export const getRandomPlayer = (allPlayers, playedPlayers = {}) => {\n  if (allPlayers.length === Object.keys(playedPlayers).length) {\n    return null;\n  }\n  const playingPlayer = allPlayers.filter(\n    (player) => !playedPlayers[player.playerId]\n  );\n  const noOfPlayers = playingPlayer.length;\n  const playerIndex = Math.floor(Math.random() * noOfPlayers);\n  return playingPlayer[playerIndex];\n};\n\nexport const getStatementWisePercentage = (players) => {\n  let statement1Guess = 0;\n  let statement2Guess = 0;\n  let statement3Guess = 0;\n  let totalGuess = 0;\n  players.forEach((player) => {\n    switch (player.currentGuess) {\n      case \"1\":\n        statement1Guess++;\n        totalGuess++;\n        break;\n      case \"2\":\n        statement2Guess++;\n        totalGuess++;\n        break;\n      case \"3\":\n        statement3Guess++;\n        totalGuess++;\n        break;\n      default:\n        return;\n    }\n  });\n  const totalPlayers = players.length - 1;\n  let state1P =\n    totalPlayers > 0\n      ? Math.round((100 * parseInt(statement1Guess)) / totalPlayers)\n      : 0;\n  let state2P =\n    totalPlayers > 0\n      ? Math.round((100 * parseInt(statement2Guess)) / totalPlayers)\n      : 0;\n  let state3P =\n    totalPlayers > 0\n      ? Math.round((100 * parseInt(statement3Guess)) / totalPlayers)\n      : 0;\n  let tp =\n    totalPlayers > 0\n      ? Math.round((100 * parseInt(totalGuess)) / totalPlayers)\n      : 0;\n  return [state1P, state2P, state3P, tp];\n};\n","import React, { Component } from \"react\";\nexport class Animation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayName: props.names[0],\n    };\n    this.iterator = 0;\n  }\n\n  componentDidMount() {\n    this.timerId = setInterval(() => {\n      this.setState({\n        displayName: this.props.names[\n          this.iterator++ % this.props.names.length\n        ],\n      });\n    }, 100);\n    if(this.props.duration){\n\n        setTimeout(()=>{\n            clearInterval(this.timerId);\n        }, this.props.duration)\n    }\n  }\n\n  render() {\n    return <div className=\"animated-text\">{this.state.displayName}</div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { db } from \"../services/firebase\";\nimport { Player } from \"../components/Players\";\nimport {\n  Jumbotron,\n  Alert,\n  Button,\n  ListGroup,\n  ListGroupItem,\n  Label,\n  FormGroup,\n  Input,\n  Progress,\n  Spinner,\n} from \"reactstrap\";\nimport { getRandomPlayer, getStatementWisePercentage } from \"../helpers/utils\";\nimport { Animation } from \"../components/Animation\";\n\nconst PLAYER_SESSION = \"player-session\";\nexport class Game extends Component {\n  hasValidPlayerChecked = false;\n  constructor(props) {\n    super(props);\n    const playerSession = sessionStorage.getItem(PLAYER_SESSION);\n    this.state = {\n      playerName: \"\",\n      playerId: null,\n      readError: null,\n      writeError: null,\n      showLoader: playerSession ? true : false,\n      hasPlayerSession: playerSession,\n\n      statement_1: \"\",\n      statement_2: \"\",\n      statement_3: \"\",\n      guess: null,\n      //firebase\n      players: [],\n      playedPlayerIds: null,\n      currentPlayer: null,\n      statements: null,\n      game: null,\n    };\n  }\n\n  async componentDidMount() {\n    //listen for all the database keys\n    //and update in the state\n    this.setState({ readError: null });\n    try {\n      db.ref(\"players\").on(\"value\", this.updatePlayers);\n      db.ref(\"statements\").on(\"value\", this.updateStatements);\n      db.ref(\"currentPlayer\").on(\"value\", (snapshot) => {\n        const currentPlayer = snapshot.val();\n        this.setState({ currentPlayer, guess: 0 });\n      });\n      db.ref(\"game\").on(\"value\", (snapshot) => {\n        const game = snapshot.val();\n        this.setState({ game });\n      });\n      db.ref(\"playedPlayerIds\").on(\"value\", (snapshot) => {\n        const playedPlayerIds = snapshot.val();\n        this.setState({ playedPlayerIds });\n      });\n    } catch (error) {\n      this.setState({ readError: error.message });\n    }\n  }\n\n  updatePlayers = (snapshot) => {\n    let players = [];\n\n    snapshot.forEach((snap) => {\n      let player = snap.val();\n      players.push(player);\n      if (this.state.game && this.state.game.pollStarted) {\n      }\n    });\n    players = players.sort(\n      (player1, player2) =>\n        parseInt(player2.totalCorrectGuess) -\n        parseInt(player1.totalCorrectGuess)\n    );\n    if (\n      !this.hasValidPlayerChecked &&\n      this.state.hasPlayerSession &&\n      this.state.playerId === null\n    ) {\n      //when all players listener received data\n      //state.hasPlayerSession && state.playerId == null, check if playerSession is in players => only one time check\n      //yes -> update the player id, set loading to false\n      //no -> go to login, clear the session, set hasPlayerSession to null\n      const player = players.find(\n        (player) => player.playerId === this.state.hasPlayerSession\n      );\n      if (player) {\n        this.setState({ playerId: player.playerId, showLoader: false });\n      } else {\n        sessionStorage.removeItem(PLAYER_SESSION);\n        this.setState({ showLoader: false });\n      }\n      this.hasValidPlayerChecked = true;\n    }\n    this.setState({\n      players,\n    });\n  };\n\n  updateStatements = (snapshot) => {\n    let statements = [];\n    snapshot.forEach((snap) => {\n      statements.push(snap.val());\n    });\n    let resultDeclare = statements.some((statement) => statement.isLie);\n    this.setState({ statements, resultDeclare });\n  };\n  handlePlayerNameChange = (event) => {\n    this.setState({\n      playerName: event.target.value,\n    });\n  };\n\n  handleLogin = async (event) => {\n    //create playerid -> validate not null\n    //store it in firebase\n    //store it in session\n    //update the playerId\n    event.preventDefault();\n    this.setState({ writeError: null });\n    try {\n      const playerId = db.ref().child(\"players\").push().key;\n      if (playerId) {\n        await db.ref(\"players/\" + playerId).set({\n          playerId: playerId,\n          name: this.state.playerName,\n          currentGuess: 0,\n          totalCorrectGuess: 0,\n          lockedGuess: false,\n          timestamp: Date.now(),\n        });\n\n        sessionStorage.setItem(PLAYER_SESSION, playerId);\n        this.setState({ playerName: \"\", playerId, hasPlayerSession: playerId });\n      } else {\n        this.setState({ writeError: \"Please try again...\" });\n      }\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  };\n\n  handleStatementChange = async (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n    //also set isTyping to true -> only once do it based on value.length ==1\n    if (value.length === 1) {\n      this.setState({ writeError: null });\n      const id = name.split(\"_\")[1];\n      try {\n        await db.ref(\"statements/\" + id).update({ isTyping: true });\n      } catch (error) {\n        this.setState({ writeError: error.message });\n      }\n    }\n  };\n  handleStatementBlur = async (event) => {\n    //save value to the firebase\n    //set typing to false\n    const { name, value } = event.target;\n    this.setState({ writeError: null });\n    const id = name.split(\"_\")[1];\n    try {\n      await db.ref(\"statements/\" + id).update({ id, value, isTyping: false });\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  };\n\n  startPoll = async () => {\n    //set pollStarted = true\n    let updates = {};\n    this.setState({ writeError: null });\n    const { game, players, playerId } = this.state;\n    try {\n      updates[\"/game\"] = { ...game, pollStarted: true };\n      players.forEach((player) => {\n        const updatedPlayer = { ...player, lockedGuess: false };\n        if (player.playerId && player.playerId != playerId) {\n          updates[\"/players/\" + player.playerId] = updatedPlayer;\n        } else {\n          console.log(\"wrong player\", player);\n        }\n      });\n      db.ref().update(updates);\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  };\n\n  handleSubmitLie = () => {\n    //update all the statement true or false\n    //for all the user, update the score board\n    this.setState({ writeError: null });\n    try {\n      const {\n        playerId,\n        players,\n        guess,\n        playedPlayerIds,\n        currentPlayer,\n        statements,\n        game,\n      } = this.state;\n      const updatedStatements = {\n        1: { ...statements[0], isLie: guess == 1 },\n        2: { ...statements[1], isLie: guess == 2 },\n        3: { ...statements[2], isLie: guess == 3 },\n      };\n      let updates = {};\n      updates[\"/statements\"] = updatedStatements;\n      players.forEach((player) => {\n        const totalCorrectGuess =\n          player.currentGuess == guess\n            ? parseInt(player.totalCorrectGuess) + 1\n            : player.totalCorrectGuess;\n        const updatedPlayer = { ...player, totalCorrectGuess };\n        if (player.playerId && player.playerId != playerId) {\n          updates[\"/players/\" + player.playerId] = updatedPlayer;\n        } else {\n          console.log(\"wrong player\", player);\n        }\n      });\n      let newPlayedList = {\n        ...playedPlayerIds,\n        [currentPlayer.playerId]: true,\n      };\n      updates[\"playedPlayerIds\"] = newPlayedList;\n      updates[\"game\"] = { ...game, showResult: true };\n      db.ref().update(updates);\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  };\n\n  handleChooseNextPlayer = () => {\n    //choosingPlayer = true,\n    //remove the statements\n    //pollStarted = false\n    //showResult = false\n    //remove every players current guess\n    //set timer of 30 sec\n    //get random player and set as current player, set choosingPlayer = false\n\n    this.setState({ writeError: null });\n    try {\n      const { players, game } = this.state;\n      let updates = {};\n      updates[\"/game\"] = {\n        ...game,\n        gameStarted: true,\n        choosingPlayer: true,\n        pollStarted: false,\n        showResult: false,\n      };\n      players.forEach((player) => {\n        const updatedPlayer = {\n          ...player,\n          currentGuess: 0,\n          lockedGuess: true,\n        };\n        if (player.playerId) {\n          updates[\"/players/\" + player.playerId] = updatedPlayer;\n        }\n      });\n\n      updates[\"/currentPlayer\"] = null;\n      updates[\"/statements\"] = null;\n      db.ref().update(updates);\n\n      setTimeout(async () => {\n        const playedPlayers = this.state.playedPlayerIds\n          ? this.state.playedPlayerIds\n          : {};\n        const randomPlayer = getRandomPlayer(this.state.players, playedPlayers);\n        this.setState({ writeError: null });\n        try {\n          await db.ref(\"currentPlayer\").set(randomPlayer);\n          await db.ref(\"game\").update({ choosingPlayer: false });\n        } catch (error) {\n          this.setState({ writeError: error.message });\n        }\n      }, 5000);\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  };\n\n  handleGuess = (event) => {\n    this.setState({\n      guess: event.target.value,\n    });\n  };\n\n  handleSubmitGuess = async () => {\n    //update players guess and lock it\n    const { guess, playerId } = this.state;\n    this.setState({ writeError: null });\n    try {\n      await db.ref(\"players/\" + playerId).update({\n        currentGuess: guess,\n        lockedGuess: true,\n      });\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  };\n\n  renderAnimation = (players) => {\n    return (\n      <div>\n        <Animation\n          names={players.map((player) => player.name)}\n          duration={5000}\n        />\n      </div>\n    );\n  };\n\n  renderChosenPlayerPollStartedUI = (\n    playerId,\n    playerInfo,\n    currentPlayer,\n    game,\n    statements,\n    guess,\n    players\n  ) => {\n    //show 3 statements based on statements array from firebase\n    //show the vote percentage below each statement if showResult == true\n    //show actual poll, total votes\n    //submit Lie button -> 50% vote , handleSubmitLie\n    let percentages = [0, 0, 0, 0];\n    if (players.length > 0 && game.pollStarted) {\n      percentages = getStatementWisePercentage(players);\n    }\n    return (\n      <>\n        <p>{currentPlayer.name}'s lie is:</p>\n        <ListGroup>\n          {statements.map((statement) => {\n            return (\n              <ListGroupItem\n                active={guess == statement.id}\n                key={statement.id}\n                tag=\"label\"\n                for={statement.id}\n                action\n                disabled={game.showResult}\n              >\n                <input\n                  type=\"radio\"\n                  id={statement.id}\n                  name=\"guess\"\n                  value={statement.id}\n                  checked={guess == statement.id}\n                  onChange={this.handleGuess}\n                  className=\"invisible\"\n                ></input>\n                <label for={statement.id}>{statement.value}</label>\n                {game.showResult && (\n                  <div className=\"progress-wrapper\">\n                    <Progress\n                      animated\n                      color=\"info\"\n                      value={percentages[parseInt(statement.id) - 1]}\n                    >\n                      {percentages[parseInt(statement.id) - 1]}%/\n                    </Progress>\n                  </div>\n                )}\n              </ListGroupItem>\n            );\n          })}\n        </ListGroup>\n        <div className=\"total-guesses\">\n          <div>Total guesses:</div>\n          <Progress animated color=\"info\" value={percentages[3]}>\n            {percentages[3]}%\n          </Progress>\n        </div>\n        {!game.showResult && (\n          <Button\n            color=\"primary\"\n            size=\"lg\"\n            active\n            onClick={this.handleSubmitLie}\n          >\n            Submit Lie\n          </Button>\n        )}\n        {game.showResult && (\n          <Button\n            color=\"primary\"\n            size=\"lg\"\n            active\n            onClick={this.handleChooseNextPlayer}\n          >\n            Choose the next player\n          </Button>\n        )}\n      </>\n    );\n  };\n\n  renderChosenPlayerBeforePollStartUI = (\n    statement_1,\n    statement_2,\n    statement_3\n  ) => {\n    //show 3 text boxes, handleStatementChange, handleStatementBlur\n    //show button in disabled state till all 3 statements are there, startPoll\n    return (\n      <>\n        {\" \"}\n        <p>What are you statements ?</p>\n        <ListGroup>\n          <ListGroupItem tag=\"label\" for=\"1\" action>\n            <Input\n              type=\"text\"\n              onChange={this.handleStatementChange}\n              onBlur={this.handleStatementBlur}\n              name=\"statement_1\"\n              value={statement_1}\n            />\n          </ListGroupItem>\n          <ListGroupItem tag=\"label\" for=\"2\" action>\n            <Input\n              type=\"text\"\n              onChange={this.handleStatementChange}\n              onBlur={this.handleStatementBlur}\n              name=\"statement_2\"\n              value={statement_2}\n            />\n          </ListGroupItem>\n          <ListGroupItem tag=\"label\" for=\"3\" action>\n            <Input\n              type=\"text\"\n              onChange={this.handleStatementChange}\n              onBlur={this.handleStatementBlur}\n              name=\"statement_3\"\n              value={statement_3}\n            />\n          </ListGroupItem>\n        </ListGroup>\n        <Button\n          color=\"primary\"\n          size=\"lg\"\n          active\n          onClick={this.startPoll}\n          disabled={\n            statement_1 === \"\" || statement_2 === \"\" || statement_3 === \"\"\n          }\n        >\n          Start Guess\n        </Button>\n      </>\n    );\n  };\n\n  renderNonChosenPlayerUI = (\n    playerId,\n    playerInfo,\n    currentPlayer,\n    game,\n    statements,\n    guess,\n    players\n  ) => {\n    //this is rest player screen\n    //show result, show the result\n    //show 3 statements based on statements array from firebase\n    //if isTyping show typing...\n    //show the vote percentage below each statement if showResult == true\n    //if game.pollStarted === true show the button -> handleSubmitGuess\n    const justStartedGame = statements.every(\n      (statement) => statement.value == \"\"\n    );\n    if (justStartedGame) {\n      return <div className=\"chosen-player-name\">{currentPlayer.name}</div>;\n    }\n    let alertColor = \"\";\n    let alertMessage = \"\";\n    let percentages = [0, 0, 0, 0];\n    if (game.showResult) {\n      const correctStatement = statements.find((statement) => statement.isLie);\n      if (correctStatement && playerInfo.currentGuess == correctStatement.id) {\n        alertColor = \"success\";\n        alertMessage = \"Great.....you guessed it!\";\n        \n      } else {\n        alertColor = \"danger\";\n        alertMessage = \"Better luck next time!\";\n      }\n      percentages = getStatementWisePercentage(players);\n      \n      \n    }\n    return (\n      <>\n        {game.showResult && <Alert color={alertColor}>{alertMessage}</Alert>}\n        <p>{currentPlayer.name}'s lie is:</p>\n        <ListGroup>\n          {statements.map((statement) => {\n            return (\n              <ListGroupItem\n                active={guess == statement.id}\n                key={statement.id}\n                tag=\"label\"\n                for={statement.id}\n                action\n                color={game.showResult && statement.isLie ? \"success\": \"none\"}\n                disabled={\n                  (currentPlayer && currentPlayer.playerId === playerId) ||\n                  (playerInfo ? playerInfo.lockedGuess : false)\n                }\n              >\n                <input\n                  type=\"radio\"\n                  id={statement.id}\n                  name=\"guess\"\n                  value={statement.id}\n                  checked={guess == statement.id}\n                  onChange={this.handleGuess}\n                  className=\"invisible\"\n                ></input>\n                <label for={statement.id}>\n                  {statement.isTyping ? `typing...` : statement.value}\n                </label>\n                {game.showResult && (\n                  <div className=\"progress-wrapper\">\n                    <Progress\n                      animated\n                      color=\"info\"\n                      value={percentages[parseInt(statement.id) - 1]}\n                    >\n                      {percentages[parseInt(statement.id) - 1]}%\n                    </Progress>\n                  </div>\n                )}\n              </ListGroupItem>\n            );\n          })}\n        </ListGroup>\n        <Button\n          color=\"primary\"\n          size=\"lg\"\n          active\n          onClick={this.handleSubmitGuess}\n          disabled={\n            playerInfo ? playerInfo.lockedGuess || !game.pollStarted : false\n          }\n        >\n          {playerInfo && playerInfo.lockedGuess && game.pollStarted\n            ? `Your guess is submitted`\n            : `Submit Guess`}\n        </Button>\n      </>\n    );\n  };\n\n  renderLoginUI = (playerName, writeError) => {\n    return (\n      <form onSubmit={this.handleLogin}>\n        <FormGroup>\n          <Label for=\"userName\">What is your good name?</Label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            id=\"userName\"\n            placeholder=\"Name\"\n            onChange={this.handlePlayerNameChange}\n            value={playerName}\n          />\n        </FormGroup>\n\n        {writeError ? <p>{writeError}</p> : null}\n\n        <Button\n          color=\"primary\"\n          size=\"lg\"\n          active\n          type=\"submit\"\n          disabled={!playerName}\n        >\n          Start Playing\n        </Button>\n      </form>\n    );\n  };\n  render() {\n    const {\n      showLoader,\n      players,\n      hasPlayerSession,\n      playerId,\n      playerName,\n      writeError,\n      game,\n      guess,\n      currentPlayer,\n      statements,\n      statement_1,\n      statement_2,\n      statement_3,\n      playedPlayerIds,\n    } = this.state;\n\n    let ui;\n    if (showLoader) {\n      ui = (\n        <div className=\"loader\">\n          <Spinner style={{ width: \"5rem\", height: \"5rem\" }} />\n        </div>\n      );\n    } else {\n      const playerInfo = players.find((player) => player.playerId === playerId);\n      if (hasPlayerSession && playerId) {\n        //state.hasPlayerSession and playerId -> valid logged in user\n        if (game && game.gameStarted) {\n          //game.choosingPlayer === true && show the animation\n          if (game.choosingPlayer) {\n            ui = this.renderAnimation(players);\n          } else {\n            if (currentPlayer !== null && currentPlayer.playerId === playerId) {\n              if (game.pollStarted) {\n                ui = this.renderChosenPlayerPollStartedUI(\n                  playerId,\n                  playerInfo,\n                  currentPlayer,\n                  game,\n                  statements,\n                  guess,\n                  players\n                );\n              } else {\n                ui = this.renderChosenPlayerBeforePollStartUI(\n                  statement_1,\n                  statement_2,\n                  statement_3\n                );\n              }\n            } else if (currentPlayer) {\n              ui = this.renderNonChosenPlayerUI(\n                playerId,\n                playerInfo,\n                currentPlayer,\n                game,\n                statements,\n                guess,\n                players\n              );\n            } else {\n              if (\n                playedPlayerIds &&\n                players.length === Object.keys(playedPlayerIds).length\n              ) {\n                ui = \"Game Over!\";\n              } else {\n                ui = (\n                  <Button\n                    color=\"primary\"\n                    size=\"lg\"\n                    active\n                    onClick={this.handleChooseNextPlayer}\n                  >\n                    Lets give it one more try\n                  </Button>\n                );\n              }\n            }\n          }\n        } else {\n          if (currentPlayer === null && game && game.gameStarter === playerId) {\n            ui = (\n              <Button\n                color=\"primary\"\n                size=\"lg\"\n                active\n                onClick={this.handleChooseNextPlayer}\n              >\n                Start Game\n              </Button>\n            );\n          } else {\n            ui = <div>Game will begin soon...</div>;\n          }\n        }\n      } else {\n        ui = this.renderLoginUI(playerName, writeError);\n      }\n    }\n\n    return (\n      <Jumbotron className=\"admin-wrapper\">\n        <div className=\"statement-wrapper\">{ui}</div>\n        {hasPlayerSession && playerId && (\n          <div className=\"players-list\">\n            <Player players={this.state.players} />\n          </div>\n        )}\n      </Jumbotron>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { db } from \"../services/firebase\";\nimport { Player } from \"../components/Players\";\nimport { getRandomPlayer } from \"../helpers/utils\";\nimport {\n  Jumbotron,\n  Input,\n  Button,\n  ListGroup,\n  ListGroupItem,\n  Progress,\n} from \"reactstrap\";\nexport class Admin extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      statement1: \"\",\n      statement2: \"\",\n      statement3: \"\",\n      players: [],\n      readError: null,\n      writeError: null,\n      playedPlayerIds: {},\n      currentPlayer: null,\n      guessStart: false,\n      lieStatementNo: null,\n      statement1Guess: 0,\n      statement2Guess: 0,\n      statement3Guess: 0,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleGuessStart = this.handleGuessStart.bind(this);\n    this.handleSubmitLie = this.handleSubmitLie.bind(this);\n    this.choosePlayer = this.choosePlayer.bind(this);\n    this.handleGuess = this.handleGuess.bind(this);\n  }\n\n  async componentDidMount() {\n    this.setState({ readError: null });\n    try {\n      db.ref(\"players\").on(\"value\", (snapshot) => {\n        let players = [];\n        let statement1Guess = 0;\n        let statement2Guess = 0;\n        let statement3Guess = 0;\n        snapshot.forEach((snap) => {\n          let player = snap.val();\n          players.push(player);\n          if (this.state.guessStart) {\n            switch (player.currentGuess) {\n              case \"1\":\n                statement1Guess++;\n                break;\n              case \"2\":\n                statement2Guess++;\n                break;\n              case \"3\":\n                statement3Guess++;\n                break;\n              default:\n                return;\n            }\n          }\n        });\n        players = players.sort((player1, player2) => parseInt(player2.totalCorrectGuess) - parseInt(player1.totalCorrectGuess) )\n        this.setState({\n          players,\n          statement1Guess,\n          statement2Guess,\n          statement3Guess,\n        });\n      });\n    } catch (error) {\n      this.setState({ readError: error.message });\n    }\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async handleGuessStart(event) {\n    event.preventDefault();\n    this.setState({ writeError: null });\n    try {\n      const {\n        statement1,\n        statement2,\n        statement3,\n        players,\n        currentPlayer,\n      } = this.state;\n      const statements = {\n        1: { value: statement1, id: 1 },\n        2: { value: statement2, id: 2 },\n        3: { value: statement3, id: 3 },\n      };\n      let updates = {};\n      updates[\"/statements\"] = statements;\n      players.forEach((player) => {\n        const updatedPlayer = {\n          ...player,\n          currentGuess: null,\n          lockedGuess: false,\n        };\n        updates[\"/players/\" + player.playerId] = updatedPlayer;\n      });\n\n      updates[\"/currentPlayer\"] = currentPlayer;\n      db.ref().update(updates);\n      this.setState({\n        guessStart: true,\n      });\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  }\n\n  async handleSubmitLie() {\n    this.setState({ writeError: null });\n    try {\n      const {\n        statement1,\n        statement2,\n        statement3,\n        players,\n        lieStatementNo,\n        playedPlayerIds,\n        currentPlayer,\n      } = this.state;\n      const statements = {\n        1: { value: statement1, id: 1, isLie: lieStatementNo == 1 },\n        2: { value: statement2, id: 2, isLie: lieStatementNo == 2 },\n        3: { value: statement3, id: 3, isLie: lieStatementNo == 3 },\n      };\n      let updates = {};\n      updates[\"/statements\"] = statements;\n      players.forEach((player) => {\n        const totalCorrectGuess =\n          player.currentGuess == lieStatementNo\n            ? parseInt(player.totalCorrectGuess) + 1\n            : player.totalCorrectGuess;\n        const updatedPlayer = { ...player, totalCorrectGuess };\n        if(player.playerId){\n          updates[\"/players/\" + player.playerId] = updatedPlayer;\n        } else {\n          console.log(\"wrong player\", player)\n        }\n      });\n\n      db.ref().update(updates);\n      let newPlayedList = {\n        ...playedPlayerIds,\n        [currentPlayer.playerId]: true,\n      };\n      this.setState({\n        currentPlayer: null,\n        guessStart: false,\n        playedPlayerIds: newPlayedList,\n        lieStatementNo:null,\n        statement1:\"\",\n        statement2:\"\",\n        statement3:\"\",\n      });\n    } catch (error) {\n      this.setState({ writeError: error.message });\n    }\n  }\n\n  choosePlayer() {\n    const randomPlayer = getRandomPlayer(\n      this.state.players,\n      this.state.playedPlayerIds\n    );\n    this.setState({ currentPlayer: randomPlayer });\n  }\n\n  handleGuess(event) {\n    this.setState({\n      lieStatementNo: event.target.value,\n    });\n  }\n\n  render() {\n    const {\n      statement1,\n      statement2,\n      statement3,\n      error,\n      writeError,\n      currentPlayer,\n      guessStart,\n      lieStatementNo,\n      players,\n      statement1Guess,\n      statement2Guess,\n      statement3Guess,\n      playedPlayerIds\n    } = this.state;\n    const totalPlayers = players.length - 1;\n    const statement1Percentage =\n      totalPlayers > 0 ? (100 * parseInt(statement1Guess)) / totalPlayers : 0;\n    const statement2Percentage =\n      totalPlayers > 0 ? (100 * parseInt(statement2Guess)) / totalPlayers : 0;\n    const statement3Percentage =\n      totalPlayers > 0 ? (100 * parseInt(statement3Guess)) / totalPlayers : 0;\n    const gameOver = players.length > 0 && players.length == Object.keys(playedPlayerIds).length;\n    return (\n      <div>\n        <Jumbotron className=\"admin-wrapper\">\n          <div className=\"statement-wrapper\">\n            {currentPlayer ? (\n              <>\n                <p className=\"h1\">\n                  <mark>{currentPlayer.name} </mark>statements are as follows:\n                </p>\n                <ListGroup>\n                  <ListGroupItem\n                    active={lieStatementNo == 1}\n                    tag=\"label\"\n                    for=\"1\"\n                    action\n                  >\n                    <input\n                      type=\"radio\"\n                      id=\"1\"\n                      name=\"guess\"\n                      value=\"1\"\n                      checked={lieStatementNo == 1}\n                      onChange={this.handleGuess}\n                      className=\"invisible\"\n                    ></input>\n\n                    <Input\n                      type=\"text\"\n                      onChange={this.handleChange}\n                      name=\"statement1\"\n                      value={statement1}\n                    />\n                    {guessStart && (\n                      <div className=\"progress-wrapper\">\n                        <Progress animated color=\"info\" value={statement1Percentage}>\n                          {statement1Percentage}%\n                        </Progress>\n                      </div>\n                    )}\n                  </ListGroupItem>\n                  <ListGroupItem\n                    active={lieStatementNo == 2}\n                    tag=\"label\"\n                    for=\"2\"\n                    action\n                  >\n                    <input\n                      type=\"radio\"\n                      id=\"2\"\n                      name=\"guess\"\n                      value=\"2\"\n                      checked={lieStatementNo == 2}\n                      onChange={this.handleGuess}\n                      className=\"invisible\"\n                    ></input>\n\n                    <Input\n                      type=\"text\"\n                      onChange={this.handleChange}\n                      name=\"statement2\"\n                      value={statement2}\n                    />\n                    {guessStart && (\n                      <div className=\"progress-wrapper\">\n                        <Progress animated color=\"info\" value={statement2Percentage}>\n                          {statement2Percentage}%\n                        </Progress>\n                      </div>\n                    )}\n                  </ListGroupItem>\n                  <ListGroupItem\n                    active={lieStatementNo == 3}\n                    tag=\"label\"\n                    for=\"3\"\n                    action\n                  >\n                    <input\n                      type=\"radio\"\n                      id=\"3\"\n                      name=\"guess\"\n                      value=\"3\"\n                      checked={lieStatementNo == 3}\n                      onChange={this.handleGuess}\n                      className=\"invisible\"\n                    ></input>\n\n                    <Input\n                      type=\"text\"\n                      onChange={this.handleChange}\n                      name=\"statement3\"\n                      value={statement3}\n                    />\n                    {guessStart && (\n                      <div className=\"progress-wrapper\">\n                        <Progress animated color=\"info\" value={statement3Percentage}>\n                          {statement2Percentage}%\n                        </Progress>\n                      </div>\n                    )}\n                  </ListGroupItem>\n                </ListGroup>\n                {error ? <p>{writeError}</p> : null}\n                {guessStart ? (\n                  <Button\n                    color=\"primary\"\n                    size=\"lg\"\n                    active\n                    onClick={this.handleSubmitLie}\n                  >\n                    Submit Lie\n                  </Button>\n                ) : (\n                  <Button\n                    color=\"primary\"\n                    size=\"lg\"\n                    active\n                    onClick={this.handleGuessStart}\n                  >\n                    Start Guess\n                  </Button>\n                )}\n              </>\n            ) : gameOver ? <div className=\"game-over\">Game Over</div> :(\n              <Button\n                color=\"primary\"\n                size=\"lg\"\n                active\n                onClick={this.choosePlayer}\n              >\n                Choose the Player\n              </Button>\n            )}\n          </div>\n          <div className=\"players-list\">\n            <Player players={this.state.players} />\n          </div>\n        </Jumbotron>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Alert } from \"reactstrap\";\nimport { Game } from \"./pages/Game\";\nimport { Admin } from \"./pages/Admin\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <Alert color=\"primary\">\n        <h1>Welcome to Frontdoor's Cross Functional Team Game zone! </h1>\n      </Alert>\n      <Router>\n        <Switch>\n          <Route exact path=\"/truth-or-lie-game\" component={Game}></Route>\n          <Route path=\"/truth-or-lie-game/admin\" component={Admin}></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}